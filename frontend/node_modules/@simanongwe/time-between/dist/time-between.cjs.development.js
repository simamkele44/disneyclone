'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

/* 

Language: JavaScript
Author: Sima nongwe
Project: Time-Between Calculator 

*/

/* 22 April 2022 */
var currentDateTime = {
  now: /*#__PURE__*/new Date()
};
var currentDateTimeValues = {
  sec: /*#__PURE__*/currentDateTime.now.getSeconds(),
  min: /*#__PURE__*/currentDateTime.now.getMinutes(),
  hour: /*#__PURE__*/currentDateTime.now.getHours(),
  day: /*#__PURE__*/currentDateTime.now.getDate(),
  month: /*#__PURE__*/currentDateTime.now.getMonth() + 1,
  year: /*#__PURE__*/currentDateTime.now.getFullYear()
};
/* FIRST DATE TIME */

var firstDateTime = function firstDateTime(dateone) {
  var firstdate = new Date(dateone);
  return {
    dateone: firstdate,
    sec: firstdate.getSeconds(),
    min: firstdate.getMinutes(),
    hour: firstdate.getHours(),
    day: firstdate.getDate(),
    month: firstdate.getMonth() + 1,
    year: firstdate.getFullYear()
  };
};
/* SECOND DATE TIME */

var secondDateTime = function secondDateTime(askdate) {
  var now = new Date(askdate);
  return {
    askdate: now,
    sec: now.getSeconds(),
    min: now.getMinutes(),
    hour: now.getHours(),
    day: now.getDate(),
    month: now.getMonth() + 1,
    year: now.getFullYear()
  };
};

var timePassed = function timePassed(firstDateTime, secondDateTime) {
  // Current Date Time
  var first_year = firstDateTime.year;
  var first_month = firstDateTime.month;
  var first_day = firstDateTime.day;
  var first_hour = firstDateTime.hour;
  var first_min = firstDateTime.min;
  var first_sec = firstDateTime.sec; // Received Date Time

  var second_year = secondDateTime.year;
  var second_month = secondDateTime.month;
  var second_day = secondDateTime.day;
  var second_hour = secondDateTime.hour;
  var second_min = secondDateTime.min;
  var second_sec = secondDateTime.sec; // Check Equal Values

  var same_year = first_year == second_year;
  var same_month = first_month == second_month;
  var same_day = first_day == second_day;
  var same_hour = first_hour == second_hour;
  var same_min = first_min == second_min;

  var in_secs = same_year && same_month && same_day && same_hour && same_min;
  var in_mins = same_year && same_month && same_day && same_hour;
  var in_hours = same_year && same_month && same_day;
  var in_week = same_year && same_month && Math.abs(first_day - second_day) >= 7 && Math.abs(first_day - second_day) <= 29;
  var in_day = same_year && same_month;
  var in_months = same_year; // Time Difference Between Dates, to determine if datetime is in past or future

  var elapsed_secs = first_sec - second_sec;
  var elapsed_mins = first_min - second_min;
  var elapsed_hours = first_hour - second_hour;
  var elapsed_days = first_day - second_day;
  var elapsed_months = first_month - second_month;
  var elapsed_years = first_year - second_year; // Seconds

  if (in_secs) {
    if (!(elapsed_secs < 0)) {
      return elapsed_secs > 1 ? elapsed_secs + " seconds ago" : elapsed_secs + " second ago";
    } else {
      return elapsed_secs * -1 > 1 ? "Happenning in " + elapsed_secs * -1 + " seconds" : "Happenning in " + elapsed_secs * -1 + " second";
    }
  } // Minutes


  if (in_mins) {
    if (!(elapsed_mins < 0)) {
      return elapsed_mins > 1 ? elapsed_mins + " minutes ago" : elapsed_mins + " minute ago";
    } else {
      return elapsed_mins * -1 > 1 ? "Happening in " + elapsed_mins * -1 + " minutes" : "Happening in " + elapsed_mins * -1 + " minute";
    }
  } // Hours


  if (in_hours) {
    if (!(elapsed_hours < 0)) {
      return elapsed_hours > 1 ? elapsed_hours + " hours ago" : elapsed_hours + " hour ago";
    } else {
      return elapsed_hours * -1 > 1 ? "Hapenning in " + elapsed_hours * -1 + " hours" : "Hapenning in " + elapsed_hours * -1 + " hour";
    }
  } // Weeks


  if (in_week) {
    if (!(elapsed_days < 0)) {
      if (elapsed_days < 14) {
        return "1 week ago";
      } else if (elapsed_days < 21) {
        return "2 weeks ago";
      } else if (elapsed_days < 28) {
        return "3 weeks ago";
      } else {
        return "4 weeks ago";
      }
    } else {
      if (Math.abs(elapsed_days) < 14) {
        return "Happening in 1 week";
      } else if (Math.abs(elapsed_days) < 21) {
        return "Happening in 2 weeks";
      } else if (Math.abs(elapsed_days) < 28) {
        return "Happening in 3 weeks";
      } else {
        return "Happening in 4 weeks";
      }
    }
  } // Day


  if (in_day) {
    if (!(elapsed_days < 0)) {
      return elapsed_days > 1 ? elapsed_days + " days ago" : elapsed_days + " day ago";
    } else {
      return elapsed_days * -1 > 1 ? "Happening in " + elapsed_days * -1 + " days" : "Happening in " + elapsed_days * -1 + " day";
    }
  } // Months


  if (in_months) {
    if (!(elapsed_months < 0)) {
      return elapsed_months > 1 ? elapsed_months + " months ago" : elapsed_months + " month ago";
    } else {
      return elapsed_months * -1 > 1 ? "Happenning in " + elapsed_months * -1 + " months" : "Happenning in " + elapsed_months * -1 + " month";
    }
  }

  if (!(elapsed_years < 0)) {
    return elapsed_years > 1 ? elapsed_years + " years ago" : elapsed_years + " year ago";
  } else {
    return elapsed_years * -1 > 1 ? "Happening in " + elapsed_years * -1 + " years" : "Happening in " + elapsed_years * -1 + " year";
  }
};

var timeBetweenDates = function timeBetweenDates(firstDateTime, secondDateTime) {
  return timePassed(firstDateTime, secondDateTime);
};

var TimeBetween = function TimeBetween(_ref) {
  var firstdate = _ref.firstdate,
      seconddate = _ref.seconddate;

  var Calc = function Calc(firstdate, seconddate) {
    return timeBetweenDates(firstDateTime(new Date(firstdate)), secondDateTime(new Date(seconddate)));
  };

  return React.createElement("p", {
    style: {
      margin: '0px',
      fontSize: '14px'
    }
  }, Calc(firstdate, seconddate));
};

exports.TimeBetween = TimeBetween;
//# sourceMappingURL=time-between.cjs.development.js.map
